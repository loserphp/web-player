!function(n){var t={};function e(l){if(t[l])return t[l].exports;var i=t[l]={i:l,l:!1,exports:{}};return n[l].call(i.exports,i,i.exports,e),i.l=!0,i.exports}e.m=n,e.c=t,e.d=function(n,t,l){e.o(n,t)||Object.defineProperty(n,t,{enumerable:!0,get:l})},e.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},e.t=function(n,t){if(1&t&&(n=e(n)),8&t)return n;if(4&t&&"object"==typeof n&&n&&n.__esModule)return n;var l=Object.create(null);if(e.r(l),Object.defineProperty(l,"default",{enumerable:!0,value:n}),2&t&&"string"!=typeof n)for(var i in n)e.d(l,i,function(t){return n[t]}.bind(null,i));return l},e.n=function(n){var t=n&&n.__esModule?function(){return n.default}:function(){return n};return e.d(t,"a",t),t},e.o=function(n,t){return Object.prototype.hasOwnProperty.call(n,t)},e.p="",e(e.s=1)}([function(module,exports,__webpack_require__){"use strict";eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function errorListener(err) {\n      emitter.removeListener(name, resolver);\n      reject(err);\n    }\n\n    function resolver() {\n      if (typeof emitter.removeListener === 'function') {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n\n    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n    if (name !== 'error') {\n      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n    }\n  });\n}\n\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n  if (typeof emitter.on === 'function') {\n    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);\n  }\n}\n\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n  if (typeof emitter.on === 'function') {\n    if (flags.once) {\n      emitter.once(name, listener);\n    } else {\n      emitter.on(name, listener);\n    }\n  } else if (typeof emitter.addEventListener === 'function') {\n    // EventTarget does not have `error` event semantics like Node\n    // EventEmitters, we do not listen for `error` events here.\n    emitter.addEventListener(name, function wrapListener(arg) {\n      // IE does not have builtin `{ once: true }` support so we\n      // have to do it manually.\n      if (flags.once) {\n        emitter.removeEventListener(name, wrapListener);\n      }\n      listener(arg);\n    });\n  } else {\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n")},function(n,t,e){n.exports=e(2)},function(module,exports,__webpack_require__){eval("module.exports = __webpack_require__(7).default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9pbmRleC5qcz9iNjM1Il0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9wbGF5ZXIuanMnKS5kZWZhdWx0O1xuIl0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///2\n")},function(module,exports,__webpack_require__){eval("var api = __webpack_require__(4);\n            var content = __webpack_require__(5);\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.i, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9hc3NldC9pbmRleC5sZXNzP2JjYTYiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGFwaSA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpO1xuICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvbGVzcy1sb2FkZXIvZGlzdC9janMuanMhLi9pbmRleC5sZXNzXCIpO1xuXG4gICAgICAgICAgICBjb250ZW50ID0gY29udGVudC5fX2VzTW9kdWxlID8gY29udGVudC5kZWZhdWx0IDogY29udGVudDtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4gICAgICAgICAgICB9XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscyB8fCB7fTsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///3\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nvar isOldIE = function isOldIE() {\n  var memo;\n  return function memorize() {\n    if (typeof memo === 'undefined') {\n      // Test for IE <= 9 as proposed by Browserhacks\n      // @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805\n      // Tests for existence of standard globals is to allow style-loader\n      // to operate correctly into non-standard environments\n      // @see https://github.com/webpack-contrib/style-loader/issues/177\n      memo = Boolean(window && document && document.all && !window.atob);\n    }\n\n    return memo;\n  };\n}();\n\nvar getTarget = function getTarget() {\n  var memo = {};\n  return function memorize(target) {\n    if (typeof memo[target] === 'undefined') {\n      var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself\n\n      if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n        try {\n          // This will throw an exception if access to iframe is blocked\n          // due to cross-origin restrictions\n          styleTarget = styleTarget.contentDocument.head;\n        } catch (e) {\n          // istanbul ignore next\n          styleTarget = null;\n        }\n      }\n\n      memo[target] = styleTarget;\n    }\n\n    return memo[target];\n  };\n}();\n\nvar stylesInDom = [];\n\nfunction getIndexByIdentifier(identifier) {\n  var result = -1;\n\n  for (var i = 0; i < stylesInDom.length; i++) {\n    if (stylesInDom[i].identifier === identifier) {\n      result = i;\n      break;\n    }\n  }\n\n  return result;\n}\n\nfunction modulesToDom(list, options) {\n  var idCountMap = {};\n  var identifiers = [];\n\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var count = idCountMap[id] || 0;\n    var identifier = \"\".concat(id, \" \").concat(count);\n    idCountMap[id] = count + 1;\n    var index = getIndexByIdentifier(identifier);\n    var obj = {\n      css: item[1],\n      media: item[2],\n      sourceMap: item[3]\n    };\n\n    if (index !== -1) {\n      stylesInDom[index].references++;\n      stylesInDom[index].updater(obj);\n    } else {\n      stylesInDom.push({\n        identifier: identifier,\n        updater: addStyle(obj, options),\n        references: 1\n      });\n    }\n\n    identifiers.push(identifier);\n  }\n\n  return identifiers;\n}\n\nfunction insertStyleElement(options) {\n  var style = document.createElement('style');\n  var attributes = options.attributes || {};\n\n  if (typeof attributes.nonce === 'undefined') {\n    var nonce =  true ? __webpack_require__.nc : undefined;\n\n    if (nonce) {\n      attributes.nonce = nonce;\n    }\n  }\n\n  Object.keys(attributes).forEach(function (key) {\n    style.setAttribute(key, attributes[key]);\n  });\n\n  if (typeof options.insert === 'function') {\n    options.insert(style);\n  } else {\n    var target = getTarget(options.insert || 'head');\n\n    if (!target) {\n      throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");\n    }\n\n    target.appendChild(style);\n  }\n\n  return style;\n}\n\nfunction removeStyleElement(style) {\n  // istanbul ignore if\n  if (style.parentNode === null) {\n    return false;\n  }\n\n  style.parentNode.removeChild(style);\n}\n/* istanbul ignore next  */\n\n\nvar replaceText = function replaceText() {\n  var textStore = [];\n  return function replace(index, replacement) {\n    textStore[index] = replacement;\n    return textStore.filter(Boolean).join('\\n');\n  };\n}();\n\nfunction applyToSingletonTag(style, index, remove, obj) {\n  var css = remove ? '' : obj.media ? \"@media \".concat(obj.media, \" {\").concat(obj.css, \"}\") : obj.css; // For old IE\n\n  /* istanbul ignore if  */\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = replaceText(index, css);\n  } else {\n    var cssNode = document.createTextNode(css);\n    var childNodes = style.childNodes;\n\n    if (childNodes[index]) {\n      style.removeChild(childNodes[index]);\n    }\n\n    if (childNodes.length) {\n      style.insertBefore(cssNode, childNodes[index]);\n    } else {\n      style.appendChild(cssNode);\n    }\n  }\n}\n\nfunction applyToTag(style, options, obj) {\n  var css = obj.css;\n  var media = obj.media;\n  var sourceMap = obj.sourceMap;\n\n  if (media) {\n    style.setAttribute('media', media);\n  } else {\n    style.removeAttribute('media');\n  }\n\n  if (sourceMap && typeof btoa !== 'undefined') {\n    css += \"\\n/*# sourceMappingURL=data:application/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), \" */\");\n  } // For old IE\n\n  /* istanbul ignore if  */\n\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    while (style.firstChild) {\n      style.removeChild(style.firstChild);\n    }\n\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nvar singleton = null;\nvar singletonCounter = 0;\n\nfunction addStyle(obj, options) {\n  var style;\n  var update;\n  var remove;\n\n  if (options.singleton) {\n    var styleIndex = singletonCounter++;\n    style = singleton || (singleton = insertStyleElement(options));\n    update = applyToSingletonTag.bind(null, style, styleIndex, false);\n    remove = applyToSingletonTag.bind(null, style, styleIndex, true);\n  } else {\n    style = insertStyleElement(options);\n    update = applyToTag.bind(null, style, options);\n\n    remove = function remove() {\n      removeStyleElement(style);\n    };\n  }\n\n  update(obj);\n  return function updateStyle(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap) {\n        return;\n      }\n\n      update(obj = newObj);\n    } else {\n      remove();\n    }\n  };\n}\n\nmodule.exports = function (list, options) {\n  options = options || {}; // Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n  // tags it will allow on a page\n\n  if (!options.singleton && typeof options.singleton !== 'boolean') {\n    options.singleton = isOldIE();\n  }\n\n  list = list || [];\n  var lastIdentifiers = modulesToDom(list, options);\n  return function update(newList) {\n    newList = newList || [];\n\n    if (Object.prototype.toString.call(newList) !== '[object Array]') {\n      return;\n    }\n\n    for (var i = 0; i < lastIdentifiers.length; i++) {\n      var identifier = lastIdentifiers[i];\n      var index = getIndexByIdentifier(identifier);\n      stylesInDom[index].references--;\n    }\n\n    var newLastIdentifiers = modulesToDom(newList, options);\n\n    for (var _i = 0; _i < lastIdentifiers.length; _i++) {\n      var _identifier = lastIdentifiers[_i];\n\n      var _index = getIndexByIdentifier(_identifier);\n\n      if (stylesInDom[_index].references === 0) {\n        stylesInDom[_index].updater();\n\n        stylesInDom.splice(_index, 1);\n      }\n    }\n\n    lastIdentifiers = newLastIdentifiers;\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///4\n")},function(module,exports,__webpack_require__){eval('// Imports\nvar ___CSS_LOADER_API_IMPORT___ = __webpack_require__(6);\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.i, ".__ui__control__ {\\n  position: absolute;\\n  transition: all 0.5s;\\n  width: 100%;\\n  height: 100%;\\n}\\n.__ui__control__ .__ui_control_container__ {\\n  width: 100%;\\n  height: 100%;\\n  position: relative;\\n}\\n.__ui__control__ .__control_loading__ {\\n  position: absolute;\\n  left: 50%;\\n  top: 50%;\\n  transform: translate(-50%, -50%);\\n  cursor: pointer;\\n}\\n.__ui__control__ .__control_play__ {\\n  position: absolute;\\n  left: 50%;\\n  top: 50%;\\n  transform: translate(-50%, -50%);\\n  cursor: pointer;\\n}\\n", ""]);\n// Exports\nmodule.exports = exports;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9hc3NldC9pbmRleC5sZXNzPzA0YWUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xudmFyIF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyA9IHJlcXVpcmUoXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpO1xuZXhwb3J0cyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5fX3VpX19jb250cm9sX18ge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgdHJhbnNpdGlvbjogYWxsIDAuNXM7XFxuICB3aWR0aDogMTAwJTtcXG4gIGhlaWdodDogMTAwJTtcXG59XFxuLl9fdWlfX2NvbnRyb2xfXyAuX191aV9jb250cm9sX2NvbnRhaW5lcl9fIHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgaGVpZ2h0OiAxMDAlO1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbn1cXG4uX191aV9fY29udHJvbF9fIC5fX2NvbnRyb2xfbG9hZGluZ19fIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIGxlZnQ6IDUwJTtcXG4gIHRvcDogNTAlO1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcbi5fX3VpX19jb250cm9sX18gLl9fY29udHJvbF9wbGF5X18ge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgbGVmdDogNTAlO1xcbiAgdG9wOiA1MCU7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKTtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXCIsIFwiXCJdKTtcbi8vIEV4cG9ydHNcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cztcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///5\n')},function(module,exports,__webpack_require__){"use strict";eval('\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\n// eslint-disable-next-line func-names\nmodule.exports = function (useSourceMap) {\n  var list = []; // return the list of modules as css string\n\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = cssWithMappingToString(item, useSourceMap);\n\n      if (item[2]) {\n        return "@media ".concat(item[2], " {").concat(content, "}");\n      }\n\n      return content;\n    }).join(\'\');\n  }; // import a list of modules into the list\n  // eslint-disable-next-line func-names\n\n\n  list.i = function (modules, mediaQuery, dedupe) {\n    if (typeof modules === \'string\') {\n      // eslint-disable-next-line no-param-reassign\n      modules = [[null, modules, \'\']];\n    }\n\n    var alreadyImportedModules = {};\n\n    if (dedupe) {\n      for (var i = 0; i < this.length; i++) {\n        // eslint-disable-next-line prefer-destructuring\n        var id = this[i][0];\n\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n\n    for (var _i = 0; _i < modules.length; _i++) {\n      var item = [].concat(modules[_i]);\n\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        // eslint-disable-next-line no-continue\n        continue;\n      }\n\n      if (mediaQuery) {\n        if (!item[2]) {\n          item[2] = mediaQuery;\n        } else {\n          item[2] = "".concat(mediaQuery, " and ").concat(item[2]);\n        }\n      }\n\n      list.push(item);\n    }\n  };\n\n  return list;\n};\n\nfunction cssWithMappingToString(item, useSourceMap) {\n  var content = item[1] || \'\'; // eslint-disable-next-line prefer-destructuring\n\n  var cssMapping = item[3];\n\n  if (!cssMapping) {\n    return content;\n  }\n\n  if (useSourceMap && typeof btoa === \'function\') {\n    var sourceMapping = toComment(cssMapping);\n    var sourceURLs = cssMapping.sources.map(function (source) {\n      return "/*# sourceURL=".concat(cssMapping.sourceRoot || \'\').concat(source, " */");\n    });\n    return [content].concat(sourceURLs).concat([sourceMapping]).join(\'\\n\');\n  }\n\n  return [content].join(\'\\n\');\n} // Adapted from convert-source-map (MIT)\n\n\nfunction toComment(sourceMap) {\n  // eslint-disable-next-line no-undef\n  var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));\n  var data = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64);\n  return "/*# ".concat(data, " */");\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanM/MjRmYiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbi8vIGNzcyBiYXNlIGNvZGUsIGluamVjdGVkIGJ5IHRoZSBjc3MtbG9hZGVyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodXNlU291cmNlTWFwKSB7XG4gIHZhciBsaXN0ID0gW107IC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblxuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKTtcblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgcmV0dXJuIFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChjb250ZW50LCBcIn1cIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oJycpO1xuICB9OyAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuXG5cbiAgbGlzdC5pID0gZnVuY3Rpb24gKG1vZHVsZXMsIG1lZGlhUXVlcnksIGRlZHVwZSkge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgJyddXTtcbiAgICB9XG5cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuXG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItZGVzdHJ1Y3R1cmluZ1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2ldWzBdO1xuXG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IG1vZHVsZXMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19pXSk7XG5cbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29udGludWVcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChtZWRpYVF1ZXJ5KSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYVF1ZXJ5O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMl0gPSBcIlwiLmNvbmNhdChtZWRpYVF1ZXJ5LCBcIiBhbmQgXCIpLmNvbmNhdChpdGVtWzJdKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBsaXN0O1xufTtcblxuZnVuY3Rpb24gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApIHtcbiAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdIHx8ICcnOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWRlc3RydWN0dXJpbmdcblxuICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG5cbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cblxuICBpZiAodXNlU291cmNlTWFwICYmIHR5cGVvZiBidG9hID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSB0b0NvbW1lbnQoY3NzTWFwcGluZyk7XG4gICAgdmFyIHNvdXJjZVVSTHMgPSBjc3NNYXBwaW5nLnNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgIHJldHVybiBcIi8qIyBzb3VyY2VVUkw9XCIuY29uY2F0KGNzc01hcHBpbmcuc291cmNlUm9vdCB8fCAnJykuY29uY2F0KHNvdXJjZSwgXCIgKi9cIik7XG4gICAgfSk7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbignXFxuJyk7XG4gIH1cblxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oJ1xcbicpO1xufSAvLyBBZGFwdGVkIGZyb20gY29udmVydC1zb3VyY2UtbWFwIChNSVQpXG5cblxuZnVuY3Rpb24gdG9Db21tZW50KHNvdXJjZU1hcCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSk7XG4gIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgcmV0dXJuIFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbn0iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///6\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./src/utils/util.js\nconst getUrlInfo = function (ms = '') {\n  let regexps = {\n    mp4: /\\.mp4/,\n    flv: /\\.flv/,\n    hls: /\\.m3u8/\n  };\n  let type = '';\n  let keys = Object.keys(regexps);\n  keys.map(item => {\n    if (regexps[item].test(ms)) {\n      type = item;\n    }\n  });\n  let lastIndex = ms.indexOf('?') || ms.length;\n  let clearUrl = ms.substring(0, lastIndex);\n  let hash = ms.slice(lastIndex + 1).split('&');\n  let params = {};\n  hash.map(item => {\n    let k = item.split('=');\n    params[k[0]] = k[1];\n  });\n\n  if (!type) {\n    throw new Error(`unable to support this type of video by mediaSource: ${ms}`);\n  }\n\n  return {\n    type,\n    clearUrl,\n    params\n  };\n};\n// CONCATENATED MODULE: ./src/player/player-events.js\nconst PlayerEvents = {\n  ERROR: 'error',\n  LOADING_COMPLETE: 'loading_complete',\n  RECOVERED_EARLY_EOF: 'recovered_early_eof',\n  MEDIA_INFO: 'media_info',\n  METADATA_ARRIVED: 'metadata_arrived',\n  SCRIPTDATA_ARRIVED: 'scriptdata_arrived',\n  STATISTICS_INFO: 'statistics_info'\n};\nconst videoEvents = {\n  VIDEO_LOADSTART: 'loadstart',\n  // 开始加载数据\n  VIDEO_PROGRESS: 'progress',\n  // 正在请求数据\n  VIDEO_LOADEDDATA: 'loadeddata',\n  //媒体的第一帧已经加载完毕\n  VIDEO_LOADEDMETADATA: 'loadedmetadata',\n  //媒体的元数据已经加载完毕，现在所有的属性包含了它们应有的有效信息\n  VIDEO_ABORT: 'abort',\n  // 图像的加载被中断\n  VIDEO_ERROR: 'error',\n  // 请求数据错误\n  VIDEO_STALLED: 'stalled',\n  // 网速失速\n  VIDEO_WAITING: 'waiting',\n  // 缓冲数据\n  VIDEO_CANPLAY: 'canplay',\n  // 可以播放\n  VIDEO_PLAYING: 'playing',\n  // 在媒体开始播放时触发（不论是初次播放、在暂停后恢复、或是在结束后重新开始）\n  VIDEO_CANPLAYTHROUGH: 'canplaythrough',\n  // 可以播放，全部加载完毕\n  VIDEO_SEEKING: 'seeking',\n  // 在跳跃操作开始时触发\n  VIDEO_SEEKED: 'seeked',\n  // 在跳跃操作完成时触发\n  VIDEO_TIMEUPDATE: 'timeupdate',\n  // 时间改变\n  VIDEO_ENDED: 'ended',\n  // 播放结束\n  VIDEO_RATECHANGE: 'ratechange',\n  // 播放速度改变\n  VIDEO_VOLUMECHANGE: 'volumechange',\n  //音量改变\n  VIDEO_PAUSE: 'pause',\n  //暂停\n  VIDEO_PLAY: 'play' //播放\n\n};\n// EXTERNAL MODULE: ./node_modules/events/events.js\nvar events = __webpack_require__(0);\nvar events_default = /*#__PURE__*/__webpack_require__.n(events);\n\n// CONCATENATED MODULE: ./src/config.js\nconst defaultConfig = {\n  url: '',\n  container: document.getElementById('web-player'),\n  // enableWorker: false,\n  // enableStashBuffer: true,\n  // stashInitialSize: undefined,\n  // isLive: false,\n  // lazyLoad: true,\n  // lazyLoadMaxDuration: 3 * 60,\n  // lazyLoadRecoverDuration: 30,\n  // deferLoadAfterSourceOpen: true,\n  // autoCleanupSourceBuffer: default as false, leave unspecified\n  // autoCleanupMaxBackwardDuration: 3 * 60,\n  // autoCleanupMinBackwardDuration: 2 * 60,\n  // statisticsInfoReportInterval: 600,\n  // fixAudioTimestampGap: true,\n  // accurateSeek: false,\n  // seekType: 'range',  // [range, param, custom]\n  // seekParamStart: 'bstart',\n  // seekParamEnd: 'bend',\n  // rangeLoadZeroStart: false,\n  // customSeekHandler: undefined,\n  // reuseRedirectedURL: false,\n  // referrerPolicy: leave as unspecified\n  // headers: undefined,\n  // customLoader: undefined,\n  _emitter: null,\n  videoWidth: 0,\n  videoHeight: 0,\n  videoRate: 16 / 9,\n  autoplay: true,\n  type: 'mp4',\n  flvMediaData: {\n    type: 'flv' // 其他非必传\n\n  },\n  flvConfig: {\n    autoCleanupSourceBuffer: false,\n    autoCleanupMaxBackwardDuration: 3 * 60,\n    autoCleanupMinBackwardDuration: 2 * 60,\n    fixAudioTimestampGap: true // 其他非必传\n\n  },\n  // Hls.DefaultConfig\n  hlsConfig: {}\n};\nfunction createDefaultConfig() {\n  return Object.assign({}, defaultConfig);\n}\n// CONCATENATED MODULE: ./src/control/catch-control.js\nclass CatchControl {\n  constructor(config) {\n    this.name = 'CatchControl';\n    this._config = config;\n    this._catches = [];\n    this._maxCatchNum = 3;\n    this._currentIndex = -1;\n  }\n\n  init() {}\n\n  loadCatch() {}\n\n}\n// CONCATENATED MODULE: ./src/control/event-control.js\n\n\n/**\n * 视频事件注册、取消\n */\n\nclass event_control_EventControl {\n  constructor(_config) {\n    this.name = 'EventControl';\n    this._mediaElement = _config._mediaElement;\n    this._emitter = _config._emitter;\n    this.e = {\n      videoPause: this._videoPause.bind(this),\n      videoPlay: this._videoPlay.bind(this),\n      videoLoadstart: this._videoLoadstart.bind(this),\n      videoProgress: this._videoProgress.bind(this),\n      videoLoadeddata: this._videoLoadeddata.bind(this),\n      videoLoadedmetadata: this._videoLoadedmetadata.bind(this),\n      videoAbort: this._videoAbort.bind(this),\n      videoError: this._videoError.bind(this),\n      videoStalled: this._videoStalled.bind(this),\n      videoWaiting: this._videoWaiting.bind(this),\n      videoCanplay: this._videoCanplay.bind(this),\n      videoPlaying: this._videoPlaying.bind(this),\n      videoCanplaythrough: this._videoCanplaythrough.bind(this),\n      videoSeeking: this._videoSeeking.bind(this),\n      videoSeeked: this._videoSeeked.bind(this),\n      videoTimeupdate: this._videoTimeupdate.bind(this),\n      videoEnded: this._videoEnded.bind(this),\n      videoRatechange: this._videoRatechange.bind(this),\n      videoEnded: this._videoEnded.bind(this)\n    };\n    this.init();\n  }\n\n  init() {\n    try {\n      const keys = Object.keys(videoEvents);\n      keys.map(item => {\n        this._mediaElement.addEventListener(videoEvents[item], this.e['video' + this.upperFChart(videoEvents[item])]);\n      });\n    } catch (error) {\n      throw new Error(`${this.name} addEventListener error :`, error);\n    } // this._emitter.addListener(event, listener);\n\n  }\n\n  upperFChart(str) {\n    var reg = /\\b(\\w)|\\s(\\w)/g;\n    str = str.toLowerCase();\n    return str.replace(reg, function (m) {\n      return m.toUpperCase();\n    });\n  }\n\n  destroy() {\n    const keys = Object.keys(videoEvents);\n    keys.map(item => {\n      this._mediaElement.removeEventListener(videoEvents[item], this.e['video' + this.upperFChart(videoEvents[item])]);\n    });\n    this.e = null;\n  }\n\n  _videoPause(e) {\n    this._emitter.emit(videoEvents.VIDEO_PAUSE, e);\n  }\n\n  _videoPlay(e) {\n    this._emitter.emit(videoEvents.VIDEO_PLAY, e);\n  }\n\n  _videoLoadstart(e) {\n    this._emitter.emit(videoEvents.VIDEO_LOADSTART, e);\n  }\n\n  _videoProgress(e) {\n    this._emitter.emit(videoEvents.VIDEO_PROGRESS, e);\n  }\n\n  _videoLoadeddata(e) {\n    this._emitter.emit(videoEvents.VIDEO_LOADEDDATA, e);\n  }\n\n  _videoLoadedmetadata(e) {\n    this._emitter.emit(videoEvents.VIDEO_LOADEDMETADATA, e);\n  }\n\n  _videoAbort(e) {\n    this._emitter.emit(videoEvents.VIDEO_ABORT, e);\n  }\n\n  _videoError(e) {\n    this._emitter.emit(videoEvents.VIDEO_ERROR, e);\n  }\n\n  _videoStalled(e) {\n    this._emitter.emit(videoEvents.VIDEO_STALLED, e);\n  }\n\n  _videoWaiting(e) {\n    this._emitter.emit(videoEvents.VIDEO_WAITING, e);\n  }\n\n  _videoCanplay(e) {\n    this._emitter.emit(videoEvents.VIDEO_CANPLAY, e);\n  } // 在媒体开始播放时触发（不论是初次播放、在暂停后恢复、或是在结束后重新开始）\n\n\n  _videoPlaying(e) {\n    this._emitter.emit(videoEvents.VIDEO_PLAYING, e);\n  }\n\n  _videoCanplaythrough(e) {\n    this._emitter.emit(videoEvents.VIDEO_CANPLAYTHROUGH, e);\n  }\n\n  _videoSeeking(e) {\n    this._emitter.emit(videoEvents.VIDEO_SEEKING, e);\n  }\n\n  _videoSeeked(e) {\n    this._emitter.emit(videoEvents.VIDEO_SEEKED, e);\n  }\n\n  _videoTimeupdate(e) {\n    this._emitter.emit(videoEvents.VIDEO_TIMEUPDATE, e.target.currentTime);\n  }\n\n  _videoEnded(e) {\n    this._emitter.emit(videoEvents.VIDEO_ENDED, e);\n  }\n\n  _videoRatechange(e) {\n    this._emitter.emit(videoEvents.VIDEO_RATECHANGE, e);\n  }\n\n  _videoVolumechange(e) {\n    this._emitter.emit(videoEvents.VIDEO_VOLUMECHANGE, e);\n  }\n\n}\n// CONCATENATED MODULE: ./src/control/ui-control.js\nconst loadingSVG = `\n<svg version=\"1.1\" id=\"L9\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 100 100\" enable-background=\"new 0 0 0 0\" xml:space=\"preserve\" width=\"40\" height=\"40\">\n    <path fill=\"#fff\" d=\"M73,50c0-12.7-10.3-23-23-23S27,37.3,27,50 M30.9,50c0-10.5,8.5-19.1,19.1-19.1S69.1,39.5,69.1,50\">\n      <animateTransform attributeName=\"transform\" attributeType=\"XML\" type=\"rotate\" dur=\"1s\" from=\"0 50 50\" to=\"360 50 50\" repeatCount=\"indefinite\"></animateTransform>\n  </path>\n</svg>\n`;\nconst playSVG = `\n<svg t=\"1631859258981\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"8683\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"40\" height=\"40\">\n  <defs><style type=\"text/css\"></style></defs>\n  <path d=\"M509.683235 61.691037c-247.329015 0-447.848934 200.519919-447.848934 447.863261 0 247.331062 200.519919 447.852004 447.848934 447.852004 247.331062 0 447.866331-200.519919 447.866331-447.852004C957.549565 262.210957 757.014296 61.691037 509.683235 61.691037zM712.38075 532.75265l0 1.069355-305.282938 201.956641c-4.439102 5.989411-11.513218 9.918907-19.569708 9.918907-13.46364 0-24.408923-10.945283-24.408923-24.437575 0-0.868787 0.157589-1.707898 0.25685-2.548032l-0.25685-0.168846L363.119181 300.56652l0.25685-0.127913c-0.099261-0.868787-0.25685-1.707898-0.25685-2.587941 0-13.507642 10.945283-24.437575 24.408923-24.437575 7.6574 0 14.361079 3.570315 18.872836 9.05012l305.97981 202.811102 0 1.069355c9.907651 3.115967 17.164938 12.268418 17.164938 23.210631C729.545688 520.498558 722.287377 529.651009 712.38075 532.75265z\" p-id=\"8684\" fill=\"#e6e6e6\">\n  </path>\n</svg>\n`;\nclass UIControl {\n  constructor(config) {\n    this.name = 'UIControl';\n    this.config = config;\n    this.loadingSVG = null;\n    this.playSVG = null;\n    this.e = {\n      videoPlay: this._videoPlay.bind(this),\n      videoPause: this._videoPause.bind(this),\n      dblckick2pause: this._dblckick2pause.bind(this)\n    };\n    this._date = null;\n    this.init();\n  }\n\n  init() {\n    this.container = document.createElement('div');\n    this.container.className = '__ui__control__';\n    this.container.innerHTML = `\n      <div class=\"__ui_control_container__\" id=\"__ui_container__\">\n        <div class=\"__control_loading__\" hidden>${loadingSVG}</div>\n        <div class=\"__control_play__\" >${playSVG}</div>\n        <div class=\"__control_progress__\"></div>\n      </div>\n    `;\n    this.config.container.appendChild(this.container);\n    this.loadingSVG = this.container.querySelector('.__control_loading__');\n    this.playSVG = this.container.querySelector('.__control_play__');\n    this.container.addEventListener('click', this.e.dblckick2pause);\n    this.container.addEventListener('', this.e.videoPause);\n    this.playSVG.addEventListener('click', this.e.videoPlay);\n    this.initEventControl();\n  }\n\n  _videoPlay() {\n    this.config._mediaElement.play();\n  }\n\n  _videoPause() {\n    this.config._mediaElement.pause();\n  } // 模仿双击事件\n\n\n  _dblckick2pause() {\n    if (this._date && new Date().getTime() - this._date <= 300) {\n      this.e.videoPause();\n    }\n\n    this._date = new Date().getTime();\n  }\n\n  initEventControl() {\n    this.config._emitter.on('pause', () => {\n      this.playSVG.removeAttribute('hidden');\n    });\n\n    this.config._emitter.on('play', () => {\n      this.playSVG.setAttribute('hidden', true);\n      this.loadingSVG.setAttribute('hidden', true);\n    });\n\n    this.config._emitter.on('playing', () => {\n      this.playSVG.setAttribute('hidden', true);\n      this.loadingSVG.setAttribute('hidden', true);\n    });\n\n    this.config._emitter.on('abort', () => {\n      this.loadingSVG.setAttribute('hidden', true);\n    });\n\n    this.config._emitter.on('error', () => {\n      this.loadingSVG.setAttribute('hidden', true);\n    });\n\n    this.config._emitter.on('stalled', () => {\n      this.loadingSVG.setAttribute('hidden', true);\n    });\n\n    this.config._emitter.on('waiting', () => {\n      this.loadingSVG.removeAttribute('hidden');\n    });\n  }\n\n}\n// CONCATENATED MODULE: ./src/control/index.js\n\n\n\n// CONCATENATED MODULE: ./src/player/base-player.js\n\n\n\n\nclass base_player_BasePlayer {\n  constructor(url, container, config) {\n    this._config = createDefaultConfig();\n    Object.assign(this._config, {\n      url,\n      container,\n      type: getUrlInfo(url).type\n    }, config, {\n      flvMediaData: { ...this._config.flvMediaData,\n        ...config.flvMediaData\n      }\n    }, {\n      flvConfig: { ...this._config.flvConfig,\n        ...config.flvConfig\n      }\n    }, {\n      hlsConfig: { ...Hls.DefaultConfig,\n        ...config.hlsConfig\n      }\n    });\n    this._config._emitter = new events_default.a();\n    Object.defineProperty(this, '_emitter', {\n      get() {\n        return this._config._emitter;\n      },\n\n      set(v) {\n        this._config._emitter = v;\n      }\n\n    });\n    this._requestAnimationId = null;\n    this._throttle = true;\n    this._catchControl = new CatchControl(this._config);\n    this.onWindowResize = this._onWindowResize.bind(this);\n    window.addEventListener('resize', this.onWindowResize);\n  }\n\n  createMediaElement(src) {\n    var mediaElement = document.createElement('video');\n    mediaElement['webkit-playsinline'] = true;\n    mediaElement['playsinline'] = 'playsinline';\n    mediaElement['x-webkit-airplay'] = true;\n    mediaElement.src = src;\n    this._config._mediaElement = mediaElement;\n    Object.defineProperty(this, '_mediaElement', {\n      get() {\n        return this._config._mediaElement;\n      },\n\n      set(mediaElement) {\n        this._config._mediaElement = mediaElement;\n      }\n\n    });\n    this.attachMediaElement(this._mediaElement);\n    this.eventControl = new event_control_EventControl(this._config);\n    this.uiControl = new UIControl(this._config);\n\n    if (this._config.type == 'flv') {\n      this.flvPlayer = flvjs.createPlayer({ ...this._config.flvMediaData,\n        type: 'flv',\n        url: src\n      }, { ...this._config.flvConfig\n      });\n      this.flvPlayer.attachMediaElement(mediaElement);\n      this.flvPlayer.load();\n    } else if (this._config.type == 'hls') {\n      this.hlsPlayer = new Hls(this._config.hlsConfig);\n      this.hlsPlayer.loadSource(src);\n      this.hlsPlayer.attachMedia(mediaElement);\n      this.hlsPlayer.on(Hls.Events.MEDIA_ATTACHED, function () {\n        console.log('video and hls.js are now bound together !');\n      });\n    }\n\n    this.createCanvas();\n\n    this._config.container.appendChild(this._canvasElement);\n\n    this._config.container.style.position = 'relative';\n    this.startAnimation();\n\n    if (this._config.autoplay) {\n      this.play();\n    }\n  }\n\n  createCanvas() {\n    this._canvasElement = document.createElement('canvas');\n    this._canvasElement.style = \"height:100%;width:100%;background:black;\";\n    this._ctx = this._canvasElement.getContext('2d');\n    this._dpx = window.devicePixelRatio;\n\n    this._canvasElement.addEventListener('click', this.e.trigger);\n  }\n\n  _onWindowResize() {\n    if (this._throttle) {\n      this._throttle = false;\n      setTimeout(() => {\n        this._throttle = true;\n      }, 200);\n    } else {\n      return;\n    }\n\n    let offsetWidth = this._config.container.offsetWidth;\n    this.width = offsetWidth;\n    this.height = offsetWidth / this._config.videoRate;\n    this._canvasElement.width = this.width * this._dpx;\n    this._canvasElement.height = this.height * this._dpx;\n    this._canvasElement.style.width = this.width + 'px';\n    this._canvasElement.style.height = this.height + 'px';\n  }\n\n  startAnimation() {\n    if (this._requestAnimationId) return;\n    this.animate();\n  }\n\n  stopAnimation() {\n    window.cancelAnimationFrame(this._requestAnimationId);\n    this._requestAnimationId = null;\n  }\n\n  animate() {\n    this.render();\n    this._requestAnimationId = window.requestAnimationFrame(this.animate.bind(this));\n  }\n\n  render() {\n    this._ctx.drawImage(this._mediaElement, 0, 0, this.width * this._dpx, this.height * this._dpx);\n  }\n\n}\n// CONCATENATED MODULE: ./src/player/flv-player.js\n\n\nclass flv_player_FLVPlayer extends base_player_BasePlayer {\n  constructor(url, container, config) {\n    super(url, container, config);\n    this.name = 'FLVPlayer';\n    this.e = {\n      onvLoadedMetadata: this._onvLoadedMetadata.bind(this),\n      trigger: this._trigger.bind(this)\n    };\n    this._pendingSeekTime = null;\n    this._statisticsReporter = null; // this._mediaElement = null;\n\n    super.createMediaElement(this._config.url);\n  }\n\n  destroy() {\n    if (this._mediaElement) {\n      this.unload();\n      this.detachMediaElement();\n    }\n\n    this.e = null;\n\n    this._emitter.removeAllListeners();\n\n    this._emitter = null;\n    this.eventControl.destroy();\n    this.eventControl = null;\n  }\n\n  on(event, listener) {\n    if (event === PlayerEvents.MEDIA_INFO) {\n      if (this._mediaElement != null && this._mediaElement.readyState !== 0) {\n        // HAVE_NOTHING\n        Promise.resolve().then(() => {\n          this._emitter.emit(PlayerEvents.MEDIA_INFO, this.mediaInfo);\n        });\n      }\n    } else if (event === PlayerEvents.STATISTICS_INFO) {\n      if (this._mediaElement != null && this._mediaElement.readyState !== 0) {\n        Promise.resolve().then(() => {\n          this._emitter.emit(PlayerEvents.STATISTICS_INFO, this.statisticsInfo);\n        });\n      }\n    }\n\n    this._emitter.addListener(event, listener);\n  }\n\n  off(event, listener) {\n    this._emitter.removeListener(event, listener);\n  }\n\n  attachMediaElement(mediaElement) {\n    // this._mediaElement = mediaElement;\n    mediaElement.addEventListener('loadedmetadata', this.e.onvLoadedMetadata);\n\n    if (this._pendingSeekTime != null) {\n      try {\n        mediaElement.currentTime = this._pendingSeekTime;\n        this._pendingSeekTime = null;\n      } catch (e) {// IE11 may throw InvalidStateError if readyState === 0\n        // Defer set currentTime operation after loadedmetadata\n      }\n    }\n  }\n\n  detachMediaElement() {\n    if (this._mediaElement) {\n      this._mediaElement.src = '';\n\n      this._mediaElement.removeAttribute('src');\n\n      this._mediaElement.removeEventListener('loadedmetadata', this.e.onvLoadedMetadata);\n\n      this._mediaElement = null;\n    }\n\n    if (this._statisticsReporter != null) {\n      window.clearInterval(this._statisticsReporter);\n      this._statisticsReporter = null;\n    }\n\n    this.stopAnimation();\n\n    this._ctx.clearRect(0, 0, this.width * this._dpx, this.height * this._dpx);\n  }\n\n  load() {\n    if (!this._mediaElement) {\n      throw new Error('HTMLMediaElement must be attached before load()!');\n    }\n\n    this._mediaElement.src = this._mediaDataSource.url;\n\n    if (this._mediaElement.readyState > 0) {\n      this._mediaElement.currentTime = 0;\n    }\n\n    this._mediaElement.preload = 'auto';\n\n    this._mediaElement.load();\n\n    this._statisticsReporter = window.setInterval(this._reportStatisticsInfo.bind(this), this._config.statisticsInfoReportInterval);\n  }\n\n  unload() {\n    if (this._mediaElement) {\n      this._mediaElement.src = '';\n\n      this._mediaElement.removeAttribute('src');\n    }\n\n    if (this._statisticsReporter != null) {\n      window.clearInterval(this._statisticsReporter);\n      this._statisticsReporter = null;\n    }\n  }\n\n  play() {\n    return this._mediaElement.play();\n  }\n\n  pause() {\n    this._mediaElement.pause();\n  }\n\n  _trigger() {\n    if (this._mediaElement.paused) {\n      this.play();\n    } else {\n      this.pause();\n    }\n  }\n\n  get type() {\n    return this._type;\n  }\n\n  get buffered() {\n    return this._mediaElement.buffered;\n  }\n\n  get duration() {\n    return this._mediaElement.duration;\n  }\n\n  get volume() {\n    return this._mediaElement.volume;\n  }\n\n  set volume(value) {\n    this._mediaElement.volume = value;\n  }\n\n  get muted() {\n    return this._mediaElement.muted;\n  }\n\n  set muted(muted) {\n    this._mediaElement.muted = muted;\n  }\n\n  get currentTime() {\n    if (this._mediaElement) {\n      return this._mediaElement.currentTime;\n    }\n\n    return 0;\n  }\n\n  set currentTime(seconds) {\n    if (this._mediaElement) {\n      this._mediaElement.currentTime = seconds;\n    } else {\n      this._pendingSeekTime = seconds;\n    }\n  }\n\n  get mediaInfo() {\n    let mediaPrefix = this._mediaElement instanceof HTMLAudioElement ? 'audio/' : 'video/';\n    let info = {\n      mimeType: mediaPrefix + this._config.type\n    };\n\n    if (this._mediaElement) {\n      info.duration = Math.floor(this._mediaElement.duration * 1000);\n\n      if (this._mediaElement instanceof HTMLVideoElement) {\n        info.width = this._mediaElement.videoWidth;\n        info.height = this._mediaElement.videoHeight;\n      }\n    }\n\n    return info;\n  }\n\n  get statisticsInfo() {\n    let info = {\n      playerType: this._type,\n      url: this._mediaDataSource.url\n    };\n\n    if (!(this._mediaElement instanceof HTMLVideoElement)) {\n      return info;\n    }\n\n    let hasQualityInfo = true;\n    let decoded = 0;\n    let dropped = 0;\n\n    if (this._mediaElement.getVideoPlaybackQuality) {\n      let quality = this._mediaElement.getVideoPlaybackQuality();\n\n      decoded = quality.totalVideoFrames;\n      dropped = quality.droppedVideoFrames;\n    } else if (this._mediaElement.webkitDecodedFrameCount != undefined) {\n      decoded = this._mediaElement.webkitDecodedFrameCount;\n      dropped = this._mediaElement.webkitDroppedFrameCount;\n    } else {\n      hasQualityInfo = false;\n    }\n\n    if (hasQualityInfo) {\n      info.decodedFrames = decoded;\n      info.droppedFrames = dropped;\n    }\n\n    return info;\n  }\n\n  _onvLoadedMetadata(e) {\n    if (this._pendingSeekTime != null) {\n      this._mediaElement.currentTime = this._pendingSeekTime;\n      this._pendingSeekTime = null;\n    }\n\n    this._emitter.emit(PlayerEvents.MEDIA_INFO, this.mediaInfo);\n\n    this._config.videoWidth = this._mediaElement.videoWidth;\n    this._config.videoHeight = this._mediaElement.videoHeight;\n    this._config.videoRate = this._config.videoWidth / this._config.videoHeight;\n    this.onWindowResize();\n  }\n\n  _reportStatisticsInfo() {\n    this._emitter.emit(PlayerEvents.STATISTICS_INFO, this.statisticsInfo);\n  }\n\n}\n// CONCATENATED MODULE: ./src/player/hls-player.js\n\n\nclass hls_player_HLSPlayer extends base_player_BasePlayer {\n  constructor(url, container, config) {\n    super(url, container, config);\n    this.name = 'HLSPlayer';\n    this.e = {\n      onvLoadedMetadata: this._onvLoadedMetadata.bind(this),\n      trigger: this._trigger.bind(this)\n    };\n    this._pendingSeekTime = null;\n    this._statisticsReporter = null; // this._mediaElement = null;\n\n    super.createMediaElement(this._config.url);\n  }\n\n  destroy() {\n    if (this._mediaElement) {\n      this.unload();\n      this.detachMediaElement();\n    }\n\n    this.e = null;\n\n    this._emitter.removeAllListeners();\n\n    this._emitter = null;\n    this.eventControl.destroy();\n    this.eventControl = null;\n  }\n\n  on(event, listener) {\n    if (event === PlayerEvents.MEDIA_INFO) {\n      if (this._mediaElement != null && this._mediaElement.readyState !== 0) {\n        // HAVE_NOTHING\n        Promise.resolve().then(() => {\n          this._emitter.emit(PlayerEvents.MEDIA_INFO, this.mediaInfo);\n        });\n      }\n    } else if (event === PlayerEvents.STATISTICS_INFO) {\n      if (this._mediaElement != null && this._mediaElement.readyState !== 0) {\n        Promise.resolve().then(() => {\n          this._emitter.emit(PlayerEvents.STATISTICS_INFO, this.statisticsInfo);\n        });\n      }\n    }\n\n    this._emitter.addListener(event, listener);\n  }\n\n  off(event, listener) {\n    this._emitter.removeListener(event, listener);\n  }\n\n  attachMediaElement(mediaElement) {\n    // this._mediaElement = mediaElement;\n    mediaElement.addEventListener('loadedmetadata', this.e.onvLoadedMetadata);\n\n    if (this._pendingSeekTime != null) {\n      try {\n        mediaElement.currentTime = this._pendingSeekTime;\n        this._pendingSeekTime = null;\n      } catch (e) {// IE11 may throw InvalidStateError if readyState === 0\n        // Defer set currentTime operation after loadedmetadata\n      }\n    }\n  }\n\n  detachMediaElement() {\n    if (this._mediaElement) {\n      this._mediaElement.src = '';\n\n      this._mediaElement.removeAttribute('src');\n\n      this._mediaElement.removeEventListener('loadedmetadata', this.e.onvLoadedMetadata);\n\n      this._mediaElement = null;\n    }\n\n    if (this._statisticsReporter != null) {\n      window.clearInterval(this._statisticsReporter);\n      this._statisticsReporter = null;\n    }\n\n    this.stopAnimation();\n\n    this._ctx.clearRect(0, 0, this.width * this._dpx, this.height * this._dpx);\n  }\n\n  load() {\n    if (!this._mediaElement) {\n      throw new Error('HTMLMediaElement must be attached before load()!');\n    }\n\n    this._mediaElement.src = this._mediaDataSource.url;\n\n    if (this._mediaElement.readyState > 0) {\n      this._mediaElement.currentTime = 0;\n    }\n\n    this._mediaElement.preload = 'auto';\n\n    this._mediaElement.load();\n\n    this._statisticsReporter = window.setInterval(this._reportStatisticsInfo.bind(this), this._config.statisticsInfoReportInterval);\n  }\n\n  unload() {\n    if (this._mediaElement) {\n      this._mediaElement.src = '';\n\n      this._mediaElement.removeAttribute('src');\n    }\n\n    if (this._statisticsReporter != null) {\n      window.clearInterval(this._statisticsReporter);\n      this._statisticsReporter = null;\n    }\n  }\n\n  play() {\n    return this._mediaElement.play();\n  }\n\n  pause() {\n    this._mediaElement.pause();\n  }\n\n  _trigger() {\n    if (this._mediaElement.paused) {\n      this.play();\n    } else {\n      this.pause();\n    }\n  }\n\n  get type() {\n    return this._type;\n  }\n\n  get buffered() {\n    return this._mediaElement.buffered;\n  }\n\n  get duration() {\n    return this._mediaElement.duration;\n  }\n\n  get volume() {\n    return this._mediaElement.volume;\n  }\n\n  set volume(value) {\n    this._mediaElement.volume = value;\n  }\n\n  get muted() {\n    return this._mediaElement.muted;\n  }\n\n  set muted(muted) {\n    this._mediaElement.muted = muted;\n  }\n\n  get currentTime() {\n    if (this._mediaElement) {\n      return this._mediaElement.currentTime;\n    }\n\n    return 0;\n  }\n\n  set currentTime(seconds) {\n    if (this._mediaElement) {\n      this._mediaElement.currentTime = seconds;\n    } else {\n      this._pendingSeekTime = seconds;\n    }\n  }\n\n  get mediaInfo() {\n    let mediaPrefix = this._mediaElement instanceof HTMLAudioElement ? 'audio/' : 'video/';\n    let info = {\n      mimeType: mediaPrefix + this._config.type\n    };\n\n    if (this._mediaElement) {\n      info.duration = Math.floor(this._mediaElement.duration * 1000);\n\n      if (this._mediaElement instanceof HTMLVideoElement) {\n        info.width = this._mediaElement.videoWidth;\n        info.height = this._mediaElement.videoHeight;\n      }\n    }\n\n    return info;\n  }\n\n  get statisticsInfo() {\n    let info = {\n      playerType: this._type,\n      url: this._mediaDataSource.url\n    };\n\n    if (!(this._mediaElement instanceof HTMLVideoElement)) {\n      return info;\n    }\n\n    let hasQualityInfo = true;\n    let decoded = 0;\n    let dropped = 0;\n\n    if (this._mediaElement.getVideoPlaybackQuality) {\n      let quality = this._mediaElement.getVideoPlaybackQuality();\n\n      decoded = quality.totalVideoFrames;\n      dropped = quality.droppedVideoFrames;\n    } else if (this._mediaElement.webkitDecodedFrameCount != undefined) {\n      decoded = this._mediaElement.webkitDecodedFrameCount;\n      dropped = this._mediaElement.webkitDroppedFrameCount;\n    } else {\n      hasQualityInfo = false;\n    }\n\n    if (hasQualityInfo) {\n      info.decodedFrames = decoded;\n      info.droppedFrames = dropped;\n    }\n\n    return info;\n  }\n\n  _onvLoadedMetadata(e) {\n    if (this._pendingSeekTime != null) {\n      this._mediaElement.currentTime = this._pendingSeekTime;\n      this._pendingSeekTime = null;\n    }\n\n    this._emitter.emit(PlayerEvents.MEDIA_INFO, this.mediaInfo);\n\n    this._config.videoWidth = this._mediaElement.videoWidth;\n    this._config.videoHeight = this._mediaElement.videoHeight;\n    this._config.videoRate = this._config.videoWidth / this._config.videoHeight;\n    this.onWindowResize();\n  }\n\n  _reportStatisticsInfo() {\n    this._emitter.emit(PlayerEvents.STATISTICS_INFO, this.statisticsInfo);\n  }\n\n}\n// CONCATENATED MODULE: ./src/player/mp4-player.js\n\n\nclass mp4_player_MP4Player extends base_player_BasePlayer {\n  constructor(url, container, config) {\n    super(url, container, config);\n    this.name = 'MP4Player';\n    this.e = {\n      onvLoadedMetadata: this._onvLoadedMetadata.bind(this),\n      trigger: this._trigger.bind(this)\n    };\n    this._pendingSeekTime = null;\n    this._statisticsReporter = null; // this._mediaElement = null;\n\n    super.createMediaElement(this._config.url);\n  }\n\n  destroy() {\n    if (this._mediaElement) {\n      this.unload();\n      this.detachMediaElement();\n    }\n\n    this.e = null;\n\n    this._emitter.removeAllListeners();\n\n    this._emitter = null;\n    this.eventControl.destroy();\n    this.eventControl = null;\n  }\n\n  on(event, listener) {\n    if (event === PlayerEvents.MEDIA_INFO) {\n      if (this._mediaElement != null && this._mediaElement.readyState !== 0) {\n        // HAVE_NOTHING\n        Promise.resolve().then(() => {\n          this._emitter.emit(PlayerEvents.MEDIA_INFO, this.mediaInfo);\n        });\n      }\n    } else if (event === PlayerEvents.STATISTICS_INFO) {\n      if (this._mediaElement != null && this._mediaElement.readyState !== 0) {\n        Promise.resolve().then(() => {\n          this._emitter.emit(PlayerEvents.STATISTICS_INFO, this.statisticsInfo);\n        });\n      }\n    }\n\n    this._emitter.addListener(event, listener);\n  }\n\n  off(event, listener) {\n    this._emitter.removeListener(event, listener);\n  }\n\n  attachMediaElement(mediaElement) {\n    // this._mediaElement = mediaElement;\n    mediaElement.addEventListener('loadedmetadata', this.e.onvLoadedMetadata);\n\n    if (this._pendingSeekTime != null) {\n      try {\n        mediaElement.currentTime = this._pendingSeekTime;\n        this._pendingSeekTime = null;\n      } catch (e) {// IE11 may throw InvalidStateError if readyState === 0\n        // Defer set currentTime operation after loadedmetadata\n      }\n    }\n  }\n\n  detachMediaElement() {\n    if (this._mediaElement) {\n      this._mediaElement.src = '';\n\n      this._mediaElement.removeAttribute('src');\n\n      this._mediaElement.removeEventListener('loadedmetadata', this.e.onvLoadedMetadata);\n\n      this._mediaElement = null;\n    }\n\n    if (this._statisticsReporter != null) {\n      window.clearInterval(this._statisticsReporter);\n      this._statisticsReporter = null;\n    }\n\n    this.stopAnimation();\n\n    this._ctx.clearRect(0, 0, this.width * this._dpx, this.height * this._dpx);\n  }\n\n  load() {\n    if (!this._mediaElement) {\n      throw new Error('HTMLMediaElement must be attached before load()!');\n    }\n\n    this._mediaElement.src = this._mediaDataSource.url;\n\n    if (this._mediaElement.readyState > 0) {\n      this._mediaElement.currentTime = 0;\n    }\n\n    this._mediaElement.preload = 'auto';\n\n    this._mediaElement.load();\n\n    this._statisticsReporter = window.setInterval(this._reportStatisticsInfo.bind(this), this._config.statisticsInfoReportInterval);\n  }\n\n  unload() {\n    if (this._mediaElement) {\n      this._mediaElement.src = '';\n\n      this._mediaElement.removeAttribute('src');\n    }\n\n    if (this._statisticsReporter != null) {\n      window.clearInterval(this._statisticsReporter);\n      this._statisticsReporter = null;\n    }\n  }\n\n  play() {\n    return this._mediaElement.play();\n  }\n\n  pause() {\n    this._mediaElement.pause();\n  }\n\n  _trigger() {\n    if (this._mediaElement.paused) {\n      this.play();\n    } else {\n      this.pause();\n    }\n  }\n\n  get type() {\n    return this._type;\n  }\n\n  get buffered() {\n    return this._mediaElement.buffered;\n  }\n\n  get duration() {\n    return this._mediaElement.duration;\n  }\n\n  get volume() {\n    return this._mediaElement.volume;\n  }\n\n  set volume(value) {\n    this._mediaElement.volume = value;\n  }\n\n  get muted() {\n    return this._mediaElement.muted;\n  }\n\n  set muted(muted) {\n    this._mediaElement.muted = muted;\n  }\n\n  get currentTime() {\n    if (this._mediaElement) {\n      return this._mediaElement.currentTime;\n    }\n\n    return 0;\n  }\n\n  set currentTime(seconds) {\n    if (this._mediaElement) {\n      this._mediaElement.currentTime = seconds;\n    } else {\n      this._pendingSeekTime = seconds;\n    }\n  }\n\n  get mediaInfo() {\n    let mediaPrefix = this._mediaElement instanceof HTMLAudioElement ? 'audio/' : 'video/';\n    let info = {\n      mimeType: mediaPrefix + this._config.type\n    };\n\n    if (this._mediaElement) {\n      info.duration = Math.floor(this._mediaElement.duration * 1000);\n\n      if (this._mediaElement instanceof HTMLVideoElement) {\n        info.width = this._mediaElement.videoWidth;\n        info.height = this._mediaElement.videoHeight;\n      }\n    }\n\n    return info;\n  }\n\n  get statisticsInfo() {\n    let info = {\n      playerType: this._type,\n      url: this._mediaDataSource.url\n    };\n\n    if (!(this._mediaElement instanceof HTMLVideoElement)) {\n      return info;\n    }\n\n    let hasQualityInfo = true;\n    let decoded = 0;\n    let dropped = 0;\n\n    if (this._mediaElement.getVideoPlaybackQuality) {\n      let quality = this._mediaElement.getVideoPlaybackQuality();\n\n      decoded = quality.totalVideoFrames;\n      dropped = quality.droppedVideoFrames;\n    } else if (this._mediaElement.webkitDecodedFrameCount != undefined) {\n      decoded = this._mediaElement.webkitDecodedFrameCount;\n      dropped = this._mediaElement.webkitDroppedFrameCount;\n    } else {\n      hasQualityInfo = false;\n    }\n\n    if (hasQualityInfo) {\n      info.decodedFrames = decoded;\n      info.droppedFrames = dropped;\n    }\n\n    return info;\n  }\n\n  _onvLoadedMetadata(e) {\n    if (this._pendingSeekTime != null) {\n      this._mediaElement.currentTime = this._pendingSeekTime;\n      this._pendingSeekTime = null;\n    }\n\n    this._emitter.emit(PlayerEvents.MEDIA_INFO, this.mediaInfo);\n\n    this._config.videoWidth = this._mediaElement.videoWidth;\n    this._config.videoHeight = this._mediaElement.videoHeight;\n    this._config.videoRate = this._config.videoWidth / this._config.videoHeight;\n    this.onWindowResize();\n  }\n\n  _reportStatisticsInfo() {\n    this._emitter.emit(PlayerEvents.STATISTICS_INFO, this.statisticsInfo);\n  }\n\n}\n// CONCATENATED MODULE: ./src/player/index.js\n\n\n\n// EXTERNAL MODULE: ./src/asset/index.less\nvar asset = __webpack_require__(3);\n\n// CONCATENATED MODULE: ./src/player.js\n// import Polyfill from './utils/polyfill.js';\n\n\n\n // install polyfills\n// Polyfill.install();\n\nwindow.webPlayer = {\n  createPlayer(url, container, config) {\n    const {\n      type\n    } = getUrlInfo(url);\n\n    switch (type) {\n      case 'mp4':\n        return new mp4_player_MP4Player(url, container, config);\n\n      case 'flv':\n        return new flv_player_FLVPlayer(url, container, config);\n\n      case 'hls':\n        return new hls_player_HLSPlayer(url, container, config);\n\n      default:\n        break;\n    }\n  },\n\n  install(plugin) {\n    plugin.install.apply(this);\n  }\n\n};\nwebPlayer.PlayerEvents = PlayerEvents;\nwebPlayer.videoEvents = videoEvents;\nObject.defineProperty(webPlayer, 'version', {\n  enumerable: true,\n  get: function () {\n    return __VERSION__;\n  }\n});\n/* harmony default export */ var player = __webpack_exports__[\"default\"] = (webPlayer);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7\n")}]);